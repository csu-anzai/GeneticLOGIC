/* A lexical scanner generated by flex */

/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */

#define FLEX_SCANNER

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <osfcn.h>

/* use prototypes in function declarations */
#define YY_USE_PROTOS

/* the "const" storage-class-modifier is valid */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
#else
#include <stdlib.h>
#endif	/* __GNUC__ */

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#define const
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
 * so it's got to be a K&R compiler, and therefore there's no standard
 * place from which to include these definitions
 */

/* Next lines includes for ParaTSP */
#ifndef AIX
char *malloc();
int free();
int read();
#endif

#endif


/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* returned upon end-of-file */
#define YY_END_TOK 0

/* copy whatever the last rule matched to the standard output */

/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );
#define YY_NULL 0

/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 * 	if ( something_happens )
 *		YY_FATAL_ERROR( "oops, the something happened" );
 *	else
 *		everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1

/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* special action meaning "start processing a new file" */
#define YY_NEW_FILE \
	do \
		{ \
		yy_init_buffer( yy_current_buffer, yyin ); \
		yy_load_buffer_state(); \
		} \
	while ( 0 )

/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 

/* code executed at the end of each rule */
#define YY_BREAK break;

#define YY_END_OF_BUFFER_CHAR 0

#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#define YY_CHAR char
#define INITIAL 0
/* $Id: readscan.l,v 1.9 1994/02/21 18:34:20 holger Exp holger $ */
/* ========================================================================= */
/* (c) 1994 by Holger Totzke, Universitaet "Otto v. Guericke" Magdeburg      */
/* Diplomarbeit                                                              */
/* ------------------------------------------------------------------------- */
/* Dateiname : readscan.l                                                    */
/* Autor     : Holger Totzke                                                 */
/* Projekt   : PARATSP                                                       */
/* ========================================================================= */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "define.h"
#include "other.h"
#include "readpars.h"


extern long ParserLine;


char yystr[MAX_ZLEN];

#ifdef USE_PROTO
extern int read_line(char *s);
extern void read_string(void);
#else
extern int read_line();
extern void read_string();
#endif


/* done after the current pattern has been matched and before the
 * corresponding action - sets up yytext
 */
#define YY_DO_BEFORE_ACTION \
	yytext = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yytext */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_CHAR *yy_ch_buf;		/* input buffer */
    YY_CHAR *yy_buf_pos;	/* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters*/
    int yy_buf_size;	

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

static YY_BUFFER_STATE yy_current_buffer;

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed */
static YY_CHAR yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */



#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

extern YY_CHAR *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

YY_CHAR *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

#define YY_END_OF_BUFFER 80
typedef int yy_state_type;
static const short int yy_accept[523] =
    {   0,
        0,    0,   80,   78,    1,    2,   78,    5,    3,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,    1,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    6,    0,
        6,    0,    0,   43,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,    0,    0,    0,    0,    0,

        0,    0,   27,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   29,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   44,   45,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,   37,    0,    0,    0,

        0,    0,    0,   40,   41,   38,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,   11,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,   35,    0,    0,   58,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    0,    0,   60,   13,    0,    0,    0,    0,
       54,    0,   50,    0,   17,    0,   65,    0,    0,    0,
        0,    0,    0,    0,    0,   53,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   12,    0,    0,    0,   68,
        0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,

        0,    0,   63,    0,    0,    0,    0,   57,    0,    0,
       20,    0,   22,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
       75,   67,    0,    0,    0,    0,    0,   19,   21,   23,
       66,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,
       31,   71,    0,    0,    0,    0,    0,    0,    0,    0,
       56,   52,    0,    0,    0,    0,   55,   51,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,   16,    0,    0,    0,   14,    0,    0,

        0,   62,    0,   25,   76,    0,    0,    0,    0,    0,
        0,   15,    0,    0,   69,    0,    0,   77,   72,   74,
       73,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    4,    1,    4,    5,    1,    6,    7,    8,
        9,    6,    6,    6,    6,    6,    6,   10,    1,    1,
        1,    1,    1,    1,   11,    1,   12,   13,   14,   15,
       16,   17,   18,   19,    1,   20,   21,   22,   23,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,    1,
        1,    1,    1,    1,   33,    1,    1,    1,    1,    1,

       34,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[35] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2
    } ;

static const short int yy_base[524] =
    {   0,
        0,    0,  562,  563,  559,  563,   29,   34,  563,   31,
       34,   32,   36,   33,   40,  537,  536,  547,   49,  533,
       52,   31,  542,  530,  552,    0,   79,   85,  534,   44,
      528,   53,  526,   56,   74,  534,  534,  536,  523,  515,
       59,  522,  533,  516,  512,   25,  520,   70,   87,  515,
      511,  514,  514,  512,   60,  511,  516,  522,   82,   98,
      102,  499,  507,  563,  519,   91,  504,  504,  516,  503,
      511,  510,  499,  508,  563,  488,  500,  505,  498,  505,
      563,  492,  492,  500,  480,  479,  497,  496,  101,  484,
      496,  493,  481,  563,  492,  490,  485,  488,  487,  484,

      467,  478,  563,  485,  482,  475,  481,  563,  471,  465,
      469,  478,  469,  455,  109,  469,  473,  452,  457,  466,
      563,  457,  111,  113,  121,  448,  457,  461,  452,  459,
      462,  442,  441,  563,  448,  454,  446,  453,  117,  451,
      450,  445,  452,  119,  452,  431,  437,  435,  450,  116,
      447,  446,  446,  424,  435,  437,  421,  420,  439,  438,
      437,  436,  128,  563,  120,  425,  421,  432,  434,  431,
      417,  121,  428,  425,  407,  412,  563,  563,  412,  410,
      409,  408,  401,  400,  399,  418,  397,  403,  410,  413,
      394,  414,  406,  391,  408,  563,  563,  403,  406,  408,

      395,  390,  128,  563,  563,  563,  563,  393,  383,  400,
      388,  388,  378,  390,  376,  394,  384,  388,  393,  387,
      132,  121,  376,  370,  146,  387,  116,  132,  136,  382,
      373,  384,  374,  383,  362,  367,  367,  368,  373,  363,
      376,  361,  365,  354,  362,  366,  360,  359,  357,  362,
      366,  358,  361,  563,  364,  363,  351,  347,  345,  344,
      347,  351,  345,  354,  346,  563,  563,  158,  563,  332,
      349,  351,  347,  349,  345,  347,  332,  343,  344,  333,
      563,  341,  342,  325,  337,  334,  563,  333,  323,  563,
      323,  326,  334,  314,  318,  328,  325,  314,  328,  313,

      314,  309,  310,  310,  319,  318,  311,  319,  299,  295,
      309,  310,  310,  313,  308,  311,  306,  309,  295,  306,
      290,  563,  305,  282,  563,  563,  297,  299,  294,  297,
      563,  294,  563,  296,  563,  291,  563,  275,  295,  282,
      286,  290,  282,  288,  287,  563,  283,  563,  276,  271,
      271,  269,  274,  267,  272,  265,  270,  269,  261,  269,
      259,  146,  258,  258,  252,  563,  249,  248,  253,  563,
      255,  253,  254,  250,  264,  563,  241,  240,  249,  244,
      259,  255,  254,  253,  252,  251,  250,  252,  244,  238,
      249,  236,  244,  224,  223,  563,  139,  139,  222,  237,

      240,  230,  563,  219,  228,  151,  236,  563,  224,  220,
      563,  219,  563,  218,  563,  212,  220,  220,  208,  215,
      227,  152,  212,  214,  213,  221,  202,  207,  563,  206,
      563,  563,  208,  207,  206,  214,  210,  563,  563,  563,
      563,  204,  563,  143,  204,  197,  200,  208,  189,  206,
      199,  188,  205,  192,  201,  563,  201,  193,  182,  185,
      563,  563,  196,  177,  197,  189,  181,  193,  180,  191,
      563,  563,  175,  187,  188,  185,  563,  563,  563,  186,
      173,  169,  172,  173,  166,  178,  164,  172,  563,  162,
      162,  160,  172,  563,  163,  173,  165,  563,  164,  158,

      162,  563,  159,  563,  563,  148,  151,  150,  149,  126,
      114,  563,   80,   75,  563,   44,   40,  563,  563,  563,
      563,  563,   50
    } ;

static const short int yy_def[524] =
    {   0,
      522,    1,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,    8,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  523,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,    0,  522
    } ;

static const short int yy_nxt[598] =
    {   0,
        4,    5,    6,    7,    4,    8,    8,    8,    8,    9,
       10,   11,   12,   13,   14,   15,   16,    4,    4,   17,
       18,   19,    4,    4,    4,   20,   21,   22,    4,   23,
       24,    4,    4,    4,   26,   26,   26,   26,   27,   26,
       26,   26,   26,   29,   31,   34,   85,   28,   36,   35,
       40,   59,   55,   42,   56,   86,   32,   30,   37,   47,
       41,  521,   33,   38,   43,  520,   39,   28,   50,   63,
       64,   48,   97,   66,   51,   67,   69,   52,   79,   70,
       80,   53,   88,   54,   59,   59,   59,   59,   60,   98,
       61,   61,   61,   61,   71,   28,  519,   90,   72,   73,

       91,  518,   89,   61,   61,   61,   61,   61,   61,   61,
       61,  105,  127,  128,  106,   28,  151,  152,  159,  160,
      161,  162,  163,  177,  178,  183,  184,  185,  192,  163,
      164,  208,  217,  218,  264,  193,  517,  164,  271,  245,
      246,  272,  194,  261,  262,  195,  209,  268,  516,  210,
      424,  186,  247,  265,  273,  269,  263,  274,  275,  268,
      392,  276,  434,  425,  426,  427,  447,  269,  463,  464,
      515,  393,  514,  513,  512,  435,  511,  448,  449,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,

      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  433,
      432,  431,  430,  429,  428,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,

      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,

      270,  267,  266,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  244,  243,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  216,  215,  214,  213,  212,  211,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      191,  190,  189,  188,  187,  182,  181,  180,  179,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  158,  157,  156,  155,  154,  153,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,

      137,  136,  135,  134,  133,  132,  131,  130,  129,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  104,
      103,  102,  101,  100,   99,   96,   95,   94,   93,   92,
       87,   84,   83,   82,   81,   78,   77,   76,   75,   74,
       68,   65,   62,   25,   58,   57,   49,   46,   45,   44,
       25,  522,    3,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522

    } ;

static const short int yy_chk[598] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    7,    7,    7,    8,    8,
        8,    8,    8,   10,   11,   12,   46,    8,   13,   12,
       14,  523,   22,   15,   22,   46,   11,   10,   13,   19,
       14,  517,   11,   13,   15,  516,   13,    8,   21,   30,
       30,   19,   55,   32,   21,   32,   34,   21,   41,   34,
       41,   21,   48,   21,   27,   27,   27,   27,   28,   55,
       28,   28,   28,   28,   35,   59,  514,   49,   35,   35,

       49,  513,   48,   60,   60,   60,   60,   61,   61,   61,
       61,   66,   89,   89,   66,   59,  115,  115,  123,  123,
      124,  124,  125,  139,  139,  144,  144,  144,  150,  163,
      125,  165,  172,  172,  222,  150,  511,  163,  227,  203,
      203,  227,  150,  221,  221,  150,  165,  225,  510,  165,
      397,  144,  203,  222,  228,  225,  221,  228,  229,  268,
      362,  229,  406,  397,  398,  398,  422,  268,  444,  444,
      509,  362,  508,  507,  506,  406,  503,  422,  422,  501,
      500,  499,  497,  496,  495,  493,  492,  491,  490,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  476,  475,

      474,  473,  470,  469,  468,  467,  466,  465,  464,  463,
      460,  459,  458,  457,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  442,  437,  436,  435,  434,
      433,  430,  428,  427,  426,  425,  424,  423,  421,  420,
      419,  418,  417,  416,  414,  412,  410,  409,  407,  405,
      404,  402,  401,  400,  399,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  375,  374,  373,  372,  371,  369,
      368,  367,  365,  364,  363,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  347,  345,

      344,  343,  342,  341,  340,  339,  338,  336,  334,  332,
      330,  329,  328,  327,  324,  323,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  289,  288,  286,
      285,  284,  283,  282,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,

      226,  224,  223,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  202,  201,  200,  199,
      198,  195,  194,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  176,  175,
      174,  173,  171,  170,  169,  168,  167,  166,  162,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      149,  148,  147,  146,  145,  143,  142,  141,  140,  138,
      137,  136,  135,  133,  132,  131,  130,  129,  128,  127,
      126,  122,  120,  119,  118,  117,  116,  114,  113,  112,
      111,  110,  109,  107,  106,  105,  104,  102,  101,  100,

       99,   98,   97,   96,   95,   93,   92,   91,   90,   88,
       87,   86,   85,   84,   83,   82,   80,   79,   78,   77,
       76,   74,   73,   72,   71,   70,   69,   68,   67,   65,
       63,   62,   58,   57,   56,   54,   53,   52,   51,   50,
       47,   45,   44,   43,   42,   40,   39,   38,   37,   36,
       33,   31,   29,   25,   24,   23,   20,   18,   17,   16,
        5,    3,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522

    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0

/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

#define yy_new_buffer yy_create_buffer

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
	{
	YY_USER_INIT;

	if ( ! yy_start )
	    yy_start = 1;	/* first start state */

	if ( ! yyin )
	    yyin = stdin;

	if ( ! yyout )
	    yyout = stdout;

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )		/* loops until end-of-file is reached */
	{
	yy_cp = yy_c_buf_p;

	/* support of yytext */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 523 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 522 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:	/* this label is used only to access EOF actions */


	switch ( yy_act )
	    {
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
/* Ueberlesen */
	YY_BREAK
case 2:
{ ParserLine++;
                          return(yylval.kdo = Y_LF);
                        }
	YY_BREAK
case 3:
return(yylval.kdo = Y_DP);
	YY_BREAK
case 4:
return(yylval.kdo = Y_EOF);
	YY_BREAK
case 5:
{ yylval.izahl = (int) atoi(yytext);
			  return(Y_IZAHL);
			}
	YY_BREAK
case 6:
{ yylval.fzahl = (float) atof(yytext);
			  return(Y_FZAHL);
			}
	YY_BREAK
case 7:
{ read_string();
			  return(Y_NAME_STR);
			}
	YY_BREAK
case 8:
{ read_string();
			  return(Y_COMMENT_STR);
			}
	YY_BREAK
case 9:
return(yylval.kdo = Y_TYPE);
	YY_BREAK
case 10:
return(yylval.kdo = Y_DIMENSION);
	YY_BREAK
case 11:
return(yylval.kdo = Y_CAPACITY);
	YY_BREAK
case 12:
return(yylval.kdo = Y_GRAPH_TYPE);
	YY_BREAK
case 13:
return(yylval.kdo = Y_EDGE_TYPE);
	YY_BREAK
case 14:
return(yylval.kdo = Y_EDGE_WEIGHT_TYPE);
	YY_BREAK
case 15:
return(yylval.kdo = Y_EDGE_WEIGHT_FORMAT);
	YY_BREAK
case 16:
return(yylval.kdo = Y_EDGE_DATA_FORMAT);
	YY_BREAK
case 17:
return(yylval.kdo = Y_NODE_TYPE);
	YY_BREAK
case 18:
return(yylval.kdo = Y_NODE_COORD_TYPE);
	YY_BREAK
case 19:
return(yylval.kdo = Y_COORD1_OFFSET);
	YY_BREAK
case 20:
return(yylval.kdo = Y_COORD1_SCALE);
	YY_BREAK
case 21:
return(yylval.kdo = Y_COORD2_OFFSET);
	YY_BREAK
case 22:
return(yylval.kdo = Y_COORD2_SCALE);
	YY_BREAK
case 23:
return(yylval.kdo = Y_COORD3_OFFSET);
	YY_BREAK
case 24:
return(yylval.kdo = Y_COORD3_SCALE);
	YY_BREAK
case 25:
return(yylval.kdo = Y_DISPLAY_DATA_TYPE);
	YY_BREAK
case 26:
return(yylval.kdo = Y_TSP);
	YY_BREAK
case 27:
return(yylval.kdo = Y_ATSP);
	YY_BREAK
case 28:
return(yylval.kdo = Y_CVRP);
	YY_BREAK
case 29:
return(yylval.kdo = Y_TOUR);
	YY_BREAK
case 30:
return(yylval.kdo = Y_GRAPH);
	YY_BREAK
case 31:
return(yylval.kdo = Y_COMPLETE_GRAPH);
	YY_BREAK
case 32:
return(yylval.kdo = Y_SPARSE_GRAPH);
	YY_BREAK
case 33:
return(yylval.kdo = Y_UNDIRECTED);
	YY_BREAK
case 34:
return(yylval.kdo = Y_DIRECTED);
	YY_BREAK
case 35:
return(yylval.kdo = Y_EXPLICIT);
	YY_BREAK
case 36:
return(yylval.kdo = Y_EUC_2D);
	YY_BREAK
case 37:
return(yylval.kdo = Y_EUC_3D);
	YY_BREAK
case 38:
return(yylval.kdo = Y_MAX_2D);
	YY_BREAK
case 39:
return(yylval.kdo = Y_MAX_3D);
	YY_BREAK
case 40:
return(yylval.kdo = Y_MAN_2D);
	YY_BREAK
case 41:
return(yylval.kdo = Y_MAN_3D);
	YY_BREAK
case 42:
return(yylval.kdo = Y_GEO);
	YY_BREAK
case 43:
return(yylval.kdo = Y_ATT);
	YY_BREAK
case 44:
return(yylval.kdo = Y_XRAY1);
	YY_BREAK
case 45:
return(yylval.kdo = Y_XRAY2);
	YY_BREAK
case 46:
return(yylval.kdo = Y_SPECIAL);
	YY_BREAK
case 47:
return(yylval.kdo = Y_HOTO);
	YY_BREAK
case 48:
return(yylval.kdo = Y_FULL_MATRIX);
	YY_BREAK
case 49:
return(yylval.kdo = Y_UPPER_ROW);
	YY_BREAK
case 50:
return(yylval.kdo = Y_LOWER_ROW);
	YY_BREAK
case 51:
return(yylval.kdo = Y_UPPER_DIAG_ROW);
	YY_BREAK
case 52:
return(yylval.kdo = Y_LOWER_DIAG_ROW);
	YY_BREAK
case 53:
return(yylval.kdo = Y_UPPER_COL);
	YY_BREAK
case 54:
return(yylval.kdo = Y_LOWER_COL);
	YY_BREAK
case 55:
return(yylval.kdo = Y_UPPER_DIAG_COL);
	YY_BREAK
case 56:
return(yylval.kdo = Y_LOWER_DIAG_COL);
	YY_BREAK
case 57:
return(yylval.kdo = Y_WEIGHT_LIST);
	YY_BREAK
case 58:
return(yylval.kdo = Y_FUNCTION);
	YY_BREAK
case 59:
return(yylval.kdo = Y_ADJ_LIST);
	YY_BREAK
case 60:
return(yylval.kdo = Y_EDGE_LIST);
	YY_BREAK
case 61:
return(yylval.kdo = Y_WEIGHTED_NODES);
	YY_BREAK
case 62:
return(yylval.kdo = Y_UNWEIGHTED_NODES);
	YY_BREAK
case 63:
return(yylval.kdo = Y_TWOD_COORDS);
	YY_BREAK
case 64:
return(yylval.kdo = Y_THREED_COORDS);
	YY_BREAK
case 65:
return(yylval.kdo = Y_NO_COORDS);
	YY_BREAK
case 66:
return(yylval.kdo = Y_COORD_DISPLAY);
	YY_BREAK
case 67:
return(yylval.kdo = Y_TWOD_DISPLAY);
	YY_BREAK
case 68:
return(yylval.kdo = Y_NO_DISPLAY);
	YY_BREAK
case 69:
return(yylval.kdo = Y_NODE_COORD_SECTION);
	YY_BREAK
case 70:
return(yylval.kdo = Y_DEPOT_SECTION);
	YY_BREAK
case 71:
return(yylval.kdo = Y_DEMAND_SECTION);
	YY_BREAK
case 72:
return(yylval.kdo = Y_FIXED_EDGES_SECTION);
	YY_BREAK
case 73:
return(yylval.kdo = Y_DISPLAY_DATA_SECTION);
	YY_BREAK
case 74:
return(yylval.kdo = Y_NODE_WEIGHT_SECTION);
	YY_BREAK
case 75:
return(yylval.kdo = Y_TOUR_SECTION);
	YY_BREAK
case 76:
return(yylval.kdo = Y_EDGE_DATA_SECTION);
	YY_BREAK
case 77:
return(yylval.kdo = Y_EDGE_WEIGHT_SECTION);
	YY_BREAK
case 78:
return(yylval.kdo = Y_CHAR);
	YY_BREAK
case 79:
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yytext - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yytext,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yytext + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#ifdef FLEX_DEBUG
		printf( "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()

    {
    register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_CHAR *source = yytext - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register YY_CHAR *yy_cp;

    yy_current_state = yy_start;

    for ( yy_cp = yytext + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 523 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif

    {
    register int yy_is_jam;
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 523 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 522);

    return ( yy_is_jam ? 0 : yy_current_state );
    }


#ifdef YY_USE_PROTOS
static void yyunput( YY_CHAR c, register YY_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CHAR c;
register YY_CHAR *yy_bp;
#endif

    {
    register YY_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif

    {
    int c;
    YY_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;

#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yytext + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif

    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return ( b );
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }


int read_line(s)
  char *s;
{ int pos = 0;
  int ch;

  do
  { ch = input();
    yystr[pos++] = (char) ch;
  }
  while ((ch != '\n') && (ch != EOF));

  yystr[pos] = '\0';
  strcpy(s, yystr);
  ParserLine++;

  return((ch == EOF) ? 1 : 0);
}

void read_string()
{ int pos = 0;
  int ch;

  do
  { ch = input();
    yystr[pos++] = (char) ch;
  }
  while ((ch != '\n') && (ch != EOF));

  if (ch == '\n') unput('\n');
  yystr[--pos] = '\0';

  yylval.str = yystr;
}


/*** end of file ***/
