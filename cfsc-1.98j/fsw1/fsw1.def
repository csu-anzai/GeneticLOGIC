/*               The FSW1 data structures.

   *** If you change this, change FSW1.EXT ****
 */

#include "fsw1.h"

struct StateNd
  {
#if ( INTSZ == 16 )
    unsigned int Id;		/* state id, 0...2**16 is plenty of room */
#else
    short int Id;
#endif
    short int NoAttr;		/* Set TRUE if no attributes for this state */
    unsigned int Attrib[INTPRSTR];	/* Binary form of 0,1's specifying state's attributes */
    struct VLociNd *VarLoci;	/* 0 or more variable loci */
    float Payoff;		/* Payoff function, one per state */
    unsigned int VisitCnt;	/* count time spent in each */
    struct TrNode *Transits;	/* Transitions from this state */
    short NmEffTr;		/* Number of effector values for this state */
    unsigned int MaxRInit;	/* Use for random transition */
#if ( INTSZ == 16 )
    int BestNxt;		/* best next state--set by ecmd */
#else
    short int BestNxt;
#endif
    unsigned int NmBest;	/* number of times went to best next */
    unsigned int NmNeg;		/* number of times went to neg rew state next */
  }
 *States;			/* Pointer to StateNd nodes */

unsigned int NmStates;		/* actual number of states loaded */

struct StateNd *CurState, *OldState;	/* current and last state */

struct VLociNd
  {
    short int VarLocus;		/* Locus (count from 0 left) that is variable */
    float Prob1;		/* Probability the value is 1 */
    struct VLociNd *NxtVL;
  };

struct TrNode			/* Transitions for one effector setting */
  {
    short EffSet;		/* Effector setting value */
    struct PaNode *Paths;	/* Possible paths for given setting */
    struct TrNode *NxtTrans;	/* Next Transition table node */
  };

struct PaNode			/* One path from a state, for given effector setting */
  {
    float PathProb;		/* Probability (cummulative) for this path */
    struct StateNd *PathDest;	/* Destination state for this path */
    struct PaNode *NxtPath;	/* next path in from this state,effsetting */
  };

float TotSup;			/* Support for all effector setting values */
float EfValSup[EFFVALMX + 1];	/* Support for each setting */
unsigned int EfValBin;		/* Binary form of effector setting (path) chosen */
char EfSetAsc[STRATTSZ + 1];	/* ascii form of effector value set */
unsigned int EffLoci[STRATTSZ];	/* loci in effector message from which */

unsigned int EffAttSz = EFFATTSZ;	/* Bits in effector setting */
unsigned int EffAttMx = EFFATTMX;
unsigned int EffValMx = EFFVALMX;
unsigned int StrAttSz = STRATTSZ;	/* Bits in effector string, 2 for each bit in setting */
unsigned int StrAttMx = STRATTMX;

short HiTrRsl = 0;		/* Control how illegal effset values are treated (see PkTrans()) */
short DftRand = 0;		/* Control how default effset values are treated (see DftTrans()) */
short DftMstk = 0;		/* If 1, and DftTrans() is called, set MadeMstk TRUE. */

unsigned int TotNmDft = 0;	/* Total number of times default effector activated */
unsigned int NmInvldE = 0;	/* Number of times EffSet value not valid for current state */

unsigned int DisCndSz = 33;	/* For DIS Cl,22: Size to reserve for cf cond--see DisCfIE() in FSW1A.C */

	/* For checking performance */

float FSWTSR = 0.0;		/* Total SysRew over all steps */

	/* For checking classifier strengths and an upper bound */

unsigned int FSWNmCfs = 0;
struct CfNode *FSWCfs[20];
float FSWCSBds[20];
short FSWCBdWr[20];

#ifndef __PROTO_H__
#define __PROTO_H__

#if defined(__STDC__) || defined(__cplusplus)
# define PP(x) x
#else
# define PP(x) ()
#endif


/* fsw1.c */
int LoadEnv PP((char *FDName));
VOID ReadEnv PP((FILE *FilePtr));
VOID InitEnv PP((void));
VOID ReadFSW PP((FILE *FilePtr));
VOID RdStates PP((FILE *FilePtr));
char *RdVarLoc PP((char *BufPtr, struct StateNd *State));
struct TrNode *TrAlloc PP((void));
int TrFree PP((struct TrNode *tnode));
struct PaNode *PaAlloc PP((void));
int PaFree PP((struct PaNode *pnode));
struct VLociNd *VLAlloc PP((void));
int VLFree PP((struct VLociNd *tnode));
int DsplEnv PP((char *FDName, int Format));
VOID WrtEnv PP((FILE *FilePtr, int Format));
VOID SaveEnv PP((FILE *FilePtr));
int GetDMsgs PP((char MStrings[], float MIntens[]));
int StoreSup PP((struct MsgNode *MsgPtr));
int IsMemSym PP((unsigned int Symbol, char Set[]));
int PkTrans PP((int BehavStp));
int DftTrans PP((int BehavStp));
int EQTrans PP((char EMsg[]));
VOID DoBkgBeh PP((void));
VOID GtSysRew PP((void));
VOID MakeActS PP((char NewAct[]));

/* fsw1a.c */
VOID DisCfIE PP((struct CfNode *Cp, char *Buff, unsigned int Fmt));
VOID DsCfSTag PP((char CfBuff[], char OutBuff[]));
VOID DsCfSta PP((char CfBuff[], char Buff[], struct CfNode *Cp, int Cond));
VOID DsCfAct PP((struct CfNode *CPtr, char Buff[]));
VOID DsCfEffS PP((char CfBuff[], char OutBuff[], int Fmt));
VOID DoEnvCmd PP((char *ParStrng));
VOID FSWGetCf PP((char *Cfs));
VOID FSWGetSB PP((char *Bds));
VOID HelpEnv PP((void));

#undef PP
#endif	/* __PROTO_H__ */
