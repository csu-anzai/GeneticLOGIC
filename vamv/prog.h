/*
 * VAMV - Video Alpha Mosaic Virus
 *
 * Abstract:  prints alphabetic characters on a CRT screen
 * and moves them around the screen according to instructions.
 * This is not a computer virus, it's just a cute appellation.
 *
 * Copyright 1990 Rick McGowan
 */

#define SYNTH		0	/* synthesize food */
#define PICKUP		1	/* pickup an item */
#define EAT		2	/* eat an organism */
#define DEP		3	/* deposit an item */
#define BRANCH		4	/* relative branch */
#define JUMP		5	/* jump instruction */
#define MOVE		6	/* moves, up down left right */
#define MOVQ		7	/* move if unoccupied x:y */
#define JOIN		8	/* join with another */
#define DIVI		9	/* divide if no org at x:y & safe */
#define MOVI		10	/* move if item at x:y */
#define BRNNE		11	/* branch on neighbor not edible */
#define BRINE		12	/* branch on item not edible */
#define DIVQ		13	/* divide uncond, squash */
#define TRADE		14	/* trade items/material */
#define FOOD		15	/* eat an item */

#define NINSTR		16	/* number of instructions */
#define NIN		16	/* least pow of 2 over or equal to NINSTR */

#define NPREF	6	/* n Pref genes (not all used) */
#define PBITS	4	/* bits in a pref */
#define NGENE	64	/* ngenes in prog */
#define BSIZE	256	/* max byte */

/*
 * Cursor sequences for the terminal (sorry, no terminfo or termcap yet).
 * These are ANSI sequences and work on many different terminals & PCs.
 *
 *	PCLEAR	- clear screen and put cursor at home pos.
 *	PHOME	- home cursor only (no clear)
 *	PCYCLE	- home cursor and pring "C=%d" (major cycle number)
 *	PUTCUR	- put cursor at (x,y).
 *	PDRAWC	- put cursor at (x,y) and print char %c
 */

#define PCLEAR	"\033[H\033[J"
#define PHOME	"\033[H"
#define PCYCLE	"\033[HC=%d"
#define PUTCUR	"\033[%d;%dH"
#define PDRAWC	"\033[%d;%dH%c"

#define EXPIRED	-8686	/* set PC of expired oldest record to distinguish */

struct org {
	int ohold;	/* n items held now */
	int opick;	/* n items picked up */
	int everate;	/* has ever eaten or synthed food successfully? */
	int oate;	/* n items eaten this round */
	int odep;	/* n items deposited */
	int ofork;	/* n join/divides */
	int ojoin;
	int ostrength;	/* strength of organism */
	int nmove;	/* n moves */
	int badmove;	/* n bad moves */
	int pcreset;	/* n pc resets performed */
	int xpo, ypo;	/* position on board */
	int pc;
	int id;
	int oage;	/* age */
	int score;	/* score from comp function */
	int bit;	/* flag bits */
	int xreg, yreg;	/* x & y registers */
	char pref[NPREF];	/* preference genes */
	char prog[NGENE];	/* program genes */
	char padd[4];	/* padding for PC overflow! */
	int inst[NIN];	/* instruc-used counter (pad to next pow of 2) */
};

#define P_BIT	0
#define H_BIT	1
#define J_BIT	2
#define E_BIT	4

struct org *copy(), *new();

/*
 * preferences (0-25)
 */
#define P_JOIN	0	/* preferred join type */
#define P_DEP	1	/* item deposited */
#define P_PICK	2	/* preferred item to pick up */
#define P_EAT1	3	/* item preferred to eat */
#define P_EAT2	4	/* item preferred to eat */
#define P_DENS	5	/* max preferred density */

#define XOFF	2
#define YOFF	2

/*
 * A "square" board suitable for a squarish window can be
 * generated by defining SQUARE.
 * A rectangular board, suitable for a 24x80 CRT is generated
 * otherwise.
 * The square board (32x48) contains 1536 cells.
 * The rectangular board (22x70) contains 1540 cells.
 * For low speed connections (e.g., 1200 baud) try LOWSPEED.
 */

/* #define LOWSPEED */
/* #define SQUARE */

#ifdef SQUARE
# define BX	32	/* Squarish: 32x48 */
# define BY	48
# define BXm1	31
# define BYm1	47
#else
# ifdef LOWSPEED
#  define BX	20	/* Low speed: 20x35 */
#  define BY	35
#  define BXm1	19
#  define BYm1	34
# else
#  define BX	22	/* This is the default: 22x70 */
#  define BY	70
#  define BXm1	21
#  define BYm1	69
# endif
#endif

struct bo {
	char item;
	struct org *org;
};

#ifdef MARK
# include <prof.h>
#endif
